rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ─── Helpers ─────────────────────────────────────
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    function isValidTTSPreferences() {
      return !('preferences' in request.resource.data) || (
        (!('ttsRate' in request.resource.data.preferences) ||
          (request.resource.data.preferences.ttsRate is number &&
           request.resource.data.preferences.ttsRate >= 0.5 &&
           request.resource.data.preferences.ttsRate <= 2.0)) &&
        (!('ttsPitch' in request.resource.data.preferences) ||
          (request.resource.data.preferences.ttsPitch is number &&
           request.resource.data.preferences.ttsPitch >= 0.5 &&
           request.resource.data.preferences.ttsPitch <= 1.5)) &&
        (!('ttsAutoplay' in request.resource.data.preferences) ||
          (request.resource.data.preferences.ttsAutoplay is bool))
      );
    }
    function isValidTTSFeatureToggle() {
      return !('features' in request.resource.data) || 
             !('tts' in request.resource.data.features) || 
             (request.resource.data.features.tts is bool);
    }
    function isValidIconPreferences() {
      return !('icon' in request.resource.data) || (
        (request.resource.data.icon is string &&
         request.resource.data.icon.size() > 0 &&
         request.resource.data.icon.size() <= 255) &&
        (!('iconSize' in request.resource.data) ||
         (request.resource.data.iconSize is number &&
          request.resource.data.iconSize > 0 &&
          request.resource.data.iconSize <= 512))
      );
    }
    
    // ─── USERS ───────────────────────────────────────
    match /users/{userId} {
      allow read, create, delete: if isUserOwner(userId);
      allow update: if isUserOwner(userId) &&
                    isValidTTSPreferences() &&
                    isValidTTSFeatureToggle() &&
                    isValidIconPreferences();
      
      // Updated journal structure - direct documents under journal collection
      match /journal/{entryId} {
        allow read, write, update, delete: if isUserOwner(userId);
      }
      
      // Support both chat and chats paths for maximum compatibility
      match /chat/{chatId} {
        allow read, write, update, delete: if isUserOwner(userId);
        
        // Allow messages subcollection if that's how you're structuring chats
        match /messages/{messageId} {
          allow read, write, update, delete: if isUserOwner(userId);
        }
      }
      
      // Support plural 'chats' collection if your code uses it
      match /chats/{chatId} {
        allow read, write, update, delete: if isUserOwner(userId);
        
        // Allow messages subcollection
        match /messages/{messageId} {
          allow read, write, update, delete: if isUserOwner(userId);
        }
      }
      
      match /token_usage/{docId} {
        allow read, create: if isUserOwner(userId);
        allow update, delete: if false;
      }
      
      match /stats/{statsId} {
        allow read, write: if isUserOwner(userId);
      }
    }
    
    // ─── JOURNALS - Legacy ────────────────────────────────────
    // Keep this for backwards compatibility with expanded permissions
    match /journals/{userId}/entries/{entryId} {
      allow read, write, update, delete: if isUserOwner(userId);
    }
    
    // Add support for direct access to journal entries if needed
    match /journals/{userId} {
      allow read, write, update, delete: if isUserOwner(userId);
      
      match /entries/{entryId} {
        allow read, write, update, delete: if isUserOwner(userId);
      }
    }
    
    // ─── USER ENCRYPTION KEYS ───────────────────────
    match /userKeys/{userId} {
      allow read, write: if isUserOwner(userId);
    }
    
    // ─── ADMIN DOCS ─────────────────────────────────
    match /admin/{docId} {
      allow read, write: if false;
    }
  }
}